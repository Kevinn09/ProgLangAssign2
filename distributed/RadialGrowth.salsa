module distributed;

import java.io.*;
import java.util.*;

//Kevin De Leon
//Rasika Ekhalikar

//java -cp salsa1.1.5.jar:. salsac.SalsaCompiler concurrent/RadialGrowth.salsa
//javac -cp salsa1.1.5.jar:. concurrent/*.java
//java -cp salsa1.1.5.jar:. concurrent.RadialGrowth config.tsv

behavior RadialGrowth{

 	LinkedList nodes = new LinkedList();

	void act(String[] args){

		if(args.length != 2){
			standardError<-println("[error] incorrect amount of arguments " + args.length);
			return;
		}

		String filename = args[0];
		String startingUAN_ = args[1];
		String startID="";
		int count =0;
		try{
			BufferedWriter out = new BufferedWriter(new FileWriter("output.txt",false));
			out.close();
		}
		catch(IOException ioe){
		    standardError<-println("[error] Can't open the file for writing.");
		}
		try{ 
			BufferedReader reader = new BufferedReader(new FileReader(filename)); 

			String line;
			while((line = reader.readLine()) != null){

				String tmp = line;
				String[] inputs = tmp.split("\t");
				String host = inputs[1];
				String port = inputs[2];

				// Node newNode = new Node(line);
				// Node newNode = new Node(line) at (new UAN("uan://127.0.0.1:3030/1"));				
				Node newNode = new Node(line) at (new UAN("uan://"+args[1]+"/"+inputs[0]),new UAL("rmsp://"+host+":"+port));
	
				nodes.add(newNode);
				if (count ==0){
					startID=inputs[0];//sets the ID
				}
				count++;
			}	

			reader.close();

		}catch(IOException ioe){
			standardError<-println("[error] Can't open the file "+filename+" for reading.");
			return;
		}catch(Exception e){
			standardError<-println("[error] distributed RadialGrowth failed\n"+e);
			return;
		}

		// System.out.println(nodes.size());


		// ListIterator iter = nodes.listIterator();
		for(int i=0;i<nodes.size()-1;i++){
			nodes.get(i+1)<-setLeft(nodes.get(i));
		}
		nodes.getFirst()<-setLeft(nodes.get(nodes.size()-1));

		for(int i=1;i<nodes.size();i++){
			nodes.get(i)<-setRight(nodes.get(i-1));
		}
		nodes.getFirst()<-setRight(nodes.get(nodes.size()-1));
		
		for(int i=0;i<nodes.size();i++){
			nodes.get(i)<-setSize(nodes.size());
		}
		startingUAN_ = args[1]+"/"+startID;
		//beginElection(startingUAN_);

	}

	void beginElection(String startingUAN_){
		Node n = (Node)Node.getReferenceByName(new UAN("uan://"+startingUAN_));
		//n<-println("hello?");
		n<-startElection(0,0);
	}

}


