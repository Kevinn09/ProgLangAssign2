module concurrent; 

import java.io.*;
import java.util.*;
import java.lang.*;

// Kevin De Leon
// Rasika Ekhalikar

behavior RadialGrowth{

	// creates a linked list of nodes
 	Node[] nodes = new Node[8];
 	int counter = 0;
 	int totalTime =0;
 	int n;

 	// constructor-kicks off the program
 	RadialGrowth(String[] args){
 		act(args);
 	}

	void act(String[] args){

		// ensures we have the correct number of arguments
		if(args.length != 1){
			standardError<-println("[error] incorrect amount of arguments. Expecting 1, received " + args.length);
			return;
		}

		String filename = args[0];	// stores the filename

		try{
			// opens the output file to clear it and closes it
			BufferedWriter out = new BufferedWriter(new FileWriter("output.txt",false));	
			out.close();																	
			// opens the input file and reads line by line
			BufferedReader reader = new BufferedReader(new FileReader(args[0])); 
			
			// reads line by line
			String line;
			
			while((line = reader.readLine()) != null){ 	
				// creates a new node
				Node newNode = new Node(line);

				// adds the node to the linked list
				nodes[counter] = newNode;
				counter++;
			}

			// closes the input file
			reader.close();

		// catches an exception when opening the file
		}catch(IOException ioe){
			standardError<-println("[error] Can't open the file "+filename+"\n"+ioe);
			return;
		}

		// sets a nodes left and right nodes
		for(int i=0;i<counter-1;i++){
			nodes[i+1]<-setLeft(nodes[i]);
			nodes[i]<-setRight(nodes[i+1]);
		}

		// sets the first node's left equal to the last node
		nodes[0]<-setLeft(nodes[counter-1]);

		// sets the last node right equal to the first node
		nodes[counter-1]<-setRight(nodes[0]);
		
		// tells nodes the size of the list
		for(int i=0;i<counter;i++){
			nodes[i]<-setSize(counter);
		}

		// starts the first election
		beginElection(0,0): delay (new Integer (100));
		setTime():delay (new Integer (100));
		standardOutput<-println(totalTime);
		//beginElection(totalTime,1);
	
	}

	void highest(Object results[]){
		int high= -1;
		int higestid=-1;
		for (int i=0;i<counter;i++){
			if((Integer)results[i] > high){
				higestid = i;
				high = (Integer)results[i];
			}
		}
		this.n=higestid;
		standardOutput<-print("Next node:");
		standardOutput<-println(n);
	}
	int retneg(){
		return -1;
	}

	void findBest(Object results[]){
		standardOutput<-print("POTAA:");
		join{
			for (int i=0;i<counter;i++){
				if ((Integer)results[i] >=0){
					(nodes[(Integer)results[i]])<-getPrior();
				}else{
					retneg();
				}
			}
		}@highest(token);
	}
	void ha(){
		// standardOutput<-print("Next node:");
		join{
			for(int a=0; a < counter;a++){
				(nodes[a])<-getWant();
				//standardOutput<-println(b);
			}
		}@findBest(token) : delay(new Integer (200));
	}
	void retNum(int i){
		standardOutput<-println(i);
		totalTime=i;
	}
	void setTime(){
		token t = nodes[n]<-getTime();
		retNum(t): delay(new Integer (200));
	}

	void beginElection(int time, int pastLeaders){

		
		join{
			for(int a=0; a < counter;a++){
				(nodes[a])<-startElection(time,pastLeaders);
			}
		} @ha(): delay(new Integer (200));
		pastLeaders++;
		token t1 = nodes[n]<-getTime();
		nodes[n]<-leaderTime(t1, 0,pastLeaders, 0): delay(new Integer (200));;
	}

}