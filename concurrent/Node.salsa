module concurrent;

behavior Node {
  int id; //ID of the node
  int priority; //priority of the node
  int tolerance; //how long they can stand someone else being a leader

  String port; 
  String host;

  boolean hasBeenLeader;
  boolean currentLeader;
  boolean hasRevolted;

  Node left;//node to the left of the current node- so they can pass messages

  Node(String fileLine){ //creating the object
    String[] inputs = fileLine.split("\t"); //parses the line 
    host = inputs[1];
    port = inputs[2];
    hasRevolted = false; // false if they havenot revolted yet
    hasBeenLeader = false;
    currentLeader = false;

    id = Integer.parseInt(inputs[0]);
    priority = Integer.parseInt(inputs[3]);
    tolerance = Integer.parseInt(inputs[4]);
  }

  //prints a status message-will need to send this to output.txt?
  //problem??
  void printStatusMessage(int leaderId, int time, String message){
    //standardOutput<-println("ID=" + Integer.toString(leaderId) + " " + message + " at t=" + Integer.toString(time));
  }

  // Send a message
  void sendMessage(int time, int senderId, int senderCanBecomeLeader){
    left<-receiveMessage(senderId, senderCanBecomeLeader, time);
  }

  void addtoLeft(Node ptr){
    left = ptr;
  }

  //Whenever a node v sees a message with w>v, it decides not to be a leader
  //  and becomes passive
  void receiveMessage(int senderId, int senderCanBecomeLeader, int timestamp){
    if( senderId == id ){//if the current ID == the person we want to send to
      // becomes leader
      currentLeader = true;
    }
    if( id > senderId ){
      //this node has a bigger ID than the original sender, so set the leader bit to 0
      senderCanBecomeLeader = 0;
    }
    else if(timestamp == 0){
      // return message to sender including the leader bit (senderCanBecomeLeader)
    }
    else if(senderCanBecomeLeader == 1){
      timestamp *= 2;
      left<-receiveMessage(senderId, senderCanBecomeLeader, timestamp-1);
    }
    else{
      hasRevolted = false; //
    }
  }


  //begins the election for a new leader
  void startElection(int originalId, int timestamp){
    hasRevolted = false;//reset to false
    if(originalId != id){ //if the starting id is not equal to the current id....
      if(hasBeenLeader){//checks if they have been a leader
        left <-startElection(originalId, timestamp); //go on to the next person
      } 
      else {
        left <-receiveElectionMessage(id, timestamp, priority);//if they can be the next
      }
    }
    else{ //if we are back at the starting point
      standardOutput <- println("End of simulation");
    }
  }


  void recieveElectionMessage(int senderId, int overallTimeStamp, int senderPriority){


  }


  // Update all nodes with timestamps
  void receiveLeaderMessage(int senderId, int timestamp, int numberRevolted, int totalPeople, int overallTimeStamp){


  }



}