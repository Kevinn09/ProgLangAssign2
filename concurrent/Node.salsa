module concurrent;

import java.io.*;
import java.util.*;

behavior Node{

  int id;         //ID of the node
  int priority;   //priority of the node
  int tolerance;  //how long they can stand someone else being a leader
  int ttl;        
  int size;

  String port;
  String host;

  boolean canBeLeader;
  boolean tempCanBeLeader;
  boolean hasBeenLeader;
  boolean currentLeader;
  boolean hasRevolted;

  Node left; //node to the left of the current node- so they can pass messages
  Node right; 

  Node(String fileLine){ //creating the object
    String[] inputs = fileLine.split("\t"); //parses the line

    id = Integer.parseInt(inputs[0]);
    priority = Integer.parseInt(inputs[3]);
    tolerance = Integer.parseInt(inputs[4]);
    ttl = 1;
    size = 0;

    port = inputs[2];
    host = inputs[1];
    
    canBeLeader = true;
    tempCanBeLeader = true;
    hasBeenLeader = false;
    currentLeader = false;
    hasRevolted = false;
  }

  void setLeft(Node toLeft){
    left = toLeft;
    return;
  }
  void setRight(Node toRight){
    right=toRight;
    return;
  }
  void setSize(int s){
    size =s;
    return;
  }

   //prints a status message-will need to send this to output.txt?
  void printStatusMessage(String mess){
    //open file
    try{
     PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("output.txt", true)));
      out.println(mess);
      out.close();
    }
    catch(IOException ioe){
      standardError<-println("[error] Can't open the file for writing.");
    }
  }

  void reset(int counter){
    if (counter < size){
      hasRevolted = false;
      ttl = 1;
      counter++;
      left<-reset(counter);
    }
    return;
  }

  void leaderChosen(boolean chosen,int counter){
    if(counter < size){
      if(chosen == true){
        tempCanBeLeader = false;
      }else{
        tempCanBeLeader = true;
      }
      counter++;
      left<-leaderChosen(chosen,counter);
    }
    return;
  }

  //Whenever a node v sees a message with w>v, it decides not to be a leader
  //  and becomes passive
  void receiveMessage(int senderId, int senderPriority, boolean senderLeaderStatus, int tTL, int pastLeaders,int time,int localTime){
    if( senderId == id && canBeLeader){ //if the current ID == the person we want to send to becomes leader
      currentLeader = true;
      canBeLeader = false;
      printStatusMessage("ID=" + Integer.toString(senderId) + " became leader at t="+Integer.toString(time));
      time++;
      left<-leaderChosen(true,0)@
      left<-reset(0)@
      left<-leaderTime(time,0,pastLeaders,0);
    }else{
      tTL--;
      if(priority > senderPriority && canBeLeader){
        senderLeaderStatus = false;
      }else if(priority == senderPriority && canBeLeader){//check based on ID
        if(id > senderId){
          senderLeaderStatus = false;
        }
      }

      if(tTL == 0){
        left<-replyMessage(id,senderId,senderLeaderStatus,pastLeaders,time,localTime);
        // right<-replyMessage(id,senderId,senderLeaderStatus,pastLeaders,time,localTime);
      }else if(tempCanBeLeader){
        left<-receiveMessage(senderId,senderPriority,senderLeaderStatus,tTL,pastLeaders,time,localTime);
        right<-receiveMessage(senderId,senderPriority,senderLeaderStatus,tTL,pastLeaders,time,localTime);
      }
    }

    return;
  }

//supoosed to send the current time to all the nodes, only passes to the left
void leaderTime(int time, int revolts,int pastLeaders, int localTime){
  if (localTime >= tolerance && currentLeader == false && hasRevolted==false){ //leader has been in power too long
    hasRevolted= true;
    revolts++;
    printStatusMessage("ID=" + Integer.toString(id) + " revolted at t="+Integer.toString(time));
    time++;
    localTime++;
    left<-leaderTime(time, revolts, pastLeaders,localTime);
  }else if (revolts >= ((size + 1)/2) && currentLeader){
    //time to elect a new leader
    currentLeader=false;
    pastLeaders++;
    time++;
    localTime++;
    printStatusMessage("ID=" + Integer.toString(id) + " was deposed at t="+Integer.toString(time-1));
    left<-leaderChosen(false,0)@
    left<-startElection(time,pastLeaders);
  }else{
    localTime++;
    time++;
    left<-leaderTime(time,revolts,pastLeaders,localTime);
  }
  return;
}


//need to decide when the original node is the leader
  void replyMessage(int newId, int senderId, boolean senderLeaderStatus, int pastLeaders,int time,int localTime){
    if(id == senderId){
      if(senderLeaderStatus && tempCanBeLeader){
        ttl *= 2;
        left<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,time,localTime);
        right<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,time,localTime);
      }else{
        left<-startElection(time,pastLeaders); //go on to the next person
      }
    }else{
      left<-replyMessage(newId,senderId,senderLeaderStatus,pastLeaders,time,localTime);
      // right<-replyMessage(newId,senderId,senderLeaderStatus,pastLeaders,time,localTime);
    }
    return;
  }


  void startElection(int timestamp, int pastLeaders){
    if(pastLeaders == size){
      printStatusMessage("End of simulation");
      return;
    }
    if(hasBeenLeader){//checks if they have been a leader
      left<-startElection(timestamp,pastLeaders); //go on to the next person
    }else if(tempCanBeLeader){
      left<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,timestamp,0);
      right<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,timestamp,0);
    }
    return;
  }


}