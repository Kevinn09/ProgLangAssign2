module concurrent;

import java.io.*;
import java.util.*;

behavior Node{

  int id;                   // node ID
  int priority;             // node priority
  int tolerance;            // how long they can tolerate someone else being a leader
  int ttl;                  // time to live (or hop limit) of the node's message
  int size;                 // how many nodes there are
  int time1;                // time of last deposition
  int numPastLeaders;       //number of past leaders
  int wantLeader;
  int currentLeaderNum;

  boolean canBeLeader;      // if the node can be a leader
  boolean tempCanBeLeader;  // if there already is a leader
  boolean hasBeenLeader;    // if the node has been a leader
  boolean currentLeader;    // if the node is currently a leader
  boolean hasRevolted;      // if the node has revolted

  Node left;                // node to the left of the current node
  Node right;               // node to the right of the current node

  // node constructor that takes in a file and parses the information
  // from the line to fill in its variables
  Node(String fileLine){
    String[] inputs = fileLine.split("\t"); //parses the line

    // initilization of all the variables  
    id = Integer.parseInt(inputs[0]);       
    priority = Integer.parseInt(inputs[3]);
    tolerance = Integer.parseInt(inputs[4]);
    ttl = 1;
    size = 0;
    time1 = 0;
    numPastLeaders = 0;
    canBeLeader = true;
    tempCanBeLeader = true;
    hasBeenLeader = false;
    currentLeader = false;
    hasRevolted = false;
    wantLeader=-1;
    currentLeaderNum=-1;
  }

  void update(int newTime, int counter, int newLeaders){
    if(counter < size){
      time1 = newTime;
      numPastLeaders = newLeaders;
      counter++; // keeps track of how many nodes we have reset
      left<-update(newTime,counter,newLeaders);
    }
    return;
  }

  int getTime(){
    standardOutput<-print("getting time:");
    standardOutput<-println(time1);
    return time1;
  }

  int getNumLeaders(){
    return numPastLeaders;
  }

  // input: Node to the left of the current node
  // Sets left node to the current node
  void setLeft(Node toLeft){
    left = toLeft;
    return;
  }

  // input: Node to the right of the current node
  // Sets right node to the current node
  void setRight(Node toRight){
    right=toRight;
    return;
  }

  // input: size
  // sets the size
  void setSize(int s){
    size = s;
    return;
  }

  // input: message to be printed
  // opens the file and prints a status message to output.txt
  void printStatusMessage(String mess){
    try{
      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("output.txt", true)));
      out.println(mess);  // adds the message
      out.close();        // closes the file

    // error handling
    }catch(IOException ioe){
      standardError<-println("[error] Can't open the file for writing.");
    }
  }
  int ret(){
    return -1;
  } 

  // input: place holder that will keep track of how many nodes we have reset
  // resets hasRevolted and ttl of all nodes when we need to find a new leader
  void reset(int counter){
    if (counter < size){
      hasRevolted = false;
      ttl = 1;
      counter++; // keeps track of how many nodes we have reset
      left<-reset(counter);
    }
    return;
  }

  // input: whether a leader was chosen or not
  // states whether we can or cannot elect a new leader 
  // by editing tempCanBeLeader accordingly
  void leaderChosen(boolean chosen,int counter, int i){
    if(counter < size){
      if(chosen == true){ // leader was chosen
        // no one can be a leader anymore, someone already is
        tempCanBeLeader = false;
        currentLeaderNum =i;
      }else{
        // anyone can be a leader, no one is anymore
        tempCanBeLeader = true;
        currentLeaderNum= -1;
      }
      counter++;
      left<-leaderChosen(chosen,counter,i);
    }
    return;
  }

  int getWant(){
    return this.wantLeader;
  }
  int getPrior(){
    return this.priority;
  }

  void setleader(){
    currentLeader = true;
    canBeLeader = false;
    hasBeenLeader = true;
  }
  // input: orginal sender's id, orginal sender's leader status, ttl, 
  //        # of past leaders, general time of the process as a whole, time between leaders
  // main function of passing message between nodes
  int receiveMessage(int senderId, int senderPriority, boolean senderLeaderStatus, int tTL, int pastLeaders,int time,int localTime, boolean direction){
    
    // if the sender's ID == the current node's id && if current node can be a leader
    if( senderId == id && senderLeaderStatus && currentLeader==false){
      // current node recieved its message it sent out so it can become leader
      currentLeader = true;
      canBeLeader = false;
      hasBeenLeader = true;
      wantLeader=id;
      printStatusMessage("ID=" + Integer.toString(senderId) + " became leader at t="+Integer.toString(time));
      time++;
      time1=time;
      left<-leaderChosen(true,0,id)@ //makes sure nobody else can become a leader
      left<-reset(0);            //resets all of the revolts
      //left<-leaderTime(time,0,pastLeaders,0);   //pass timestamp messages
      return id;

    // if it is a node that is not the message sender
    }else{
      tTL--; 

      // if current node's priority is higher than that if the sender's
      // and the current node can be a leader (i.e. has not been a leader before)
      // then will say sender should not be leader
      if(priority >= senderPriority){
        senderLeaderStatus = false;

      // if nodes' priority match then compare against unique IDs
      }else if(priority == senderPriority){
        if(id > senderId){
          senderLeaderStatus = false;
        }
      }
      if (hasBeenLeader==true){
        senderLeaderStatus=false;
      }

      // if tTL is 0, let the original sender know if it can be a leader
      if(tTL == 0){
        left<-replyMessage(id,senderId,senderLeaderStatus,pastLeaders,time,localTime,direction);
        // if(direction){
        // }else{
        //   right<-replyMessage(id,senderId,senderLeaderStatus,pastLeaders,time,localTime,direction);
        // }
      // pass the message on
      }else if(tempCanBeLeader){
        left<-receiveMessage(senderId,senderPriority,senderLeaderStatus,tTL,pastLeaders,time,localTime,direction);
        // if(direction){
        //   right<-receiveMessage(senderId,senderPriority,senderLeaderStatus,tTL,pastLeaders,time,localTime,direction);          
        // }else{
        // }
      }
    }
    return -1;
  }

  // input: time, how many revolts, how many past leaders, time between leaders
  // passes the message to the left, letting nodes know how long leader has been a leader
  int leaderTime(int time, int revolts,int pastLeaders, int localTime, int l){

    // checks node's tolerance to time leader has been a leader
    if(localTime >= tolerance && id != l && hasRevolted==false && tempCanBeLeader==false){
      hasRevolted= true;  //sets the revolt flag
      revolts++;          //increases the number of revolts

      printStatusMessage("ID=" + Integer.toString(id) + " revolted at t="+Integer.toString(time));
      
      time++;
      localTime++;
      left<-leaderTime(time, revolts, pastLeaders,localTime,l);
      ret()@
      currentContinuation;
    // if enough nodes have revolted, then it is time for a new leader
    }else if (revolts >= ((size + 1)/2) && currentLeader){
      currentLeader=false;
      pastLeaders++;
      localTime++;

      printStatusMessage("ID=" + Integer.toString(id) + " was deposed at t="+Integer.toString(time));
      time++;
      time1=time;
      join{
        left<-update(time,0,pastLeaders)@
        left<-leaderChosen(false,0,id);

      }@ret()@
      currentContinuation;
      //return -1;
      // left<-startElection(time,pastLeaders);

    // otherwise, keep going
    }else{
      localTime++;
      time++;
      left<-leaderTime(time,revolts,pastLeaders,localTime,l);
      ret()@
      currentContinuation;
    }
   
  }

  // input: id of most recent node, id of original sender, whether original sender can be leader,
  //        # of past leaders, general time of the process as a whole, time between leaders
  // messege sent back to original messenger to tell it if it can be a leader or not
  int replyMessage(int newId, int senderId, boolean senderLeaderStatus, int pastLeaders,int time,int localTime, boolean direction){
    // original sender recieved the reply
    if(id == senderId){
      // if can be leader and no other node disagrees,
      // itpasses another message again, but with a longer ttl 
      if(senderLeaderStatus){
        ttl *= 2;
        left<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,time,localTime,direction);
        // right<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,time,localTime,direction);

        // if(direction){
        //   right<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,time,localTime,direction);
        // }else{
        // }
        // if it cannot be a leader then move on to the next node
      }
    // if it is not the original sender, keep sending till it is
    }else{
      left<-replyMessage(newId,senderId,senderLeaderStatus,pastLeaders,time,localTime,direction);

      // if(direction){
      // }else{
      //   right<-replyMessage(newId,senderId,senderLeaderStatus,pastLeaders,time,localTime,direction);
      // }
    }
    return -1;
  }

  // this is to kick off finding a new leader
  int startElection(int timestamp, int pastLeaders){

    // if(pastLeaders == size){
    //   // return -1;
    //   printStatusMessage("End of simulation");

    //   return id;
    // }

    //--------------------------------------------------------
    // take out later
    //checks if node has been a leader
    // if(hasBeenLeader){
    //   // if so, go to another node
    //   return -1;
      // left<-startElection(timestamp,pastLeaders);
    //----------------------------------------------------------

    if(tempCanBeLeader){
      join{
        right<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,timestamp,0,true);
        left<-receiveMessage(id,priority,canBeLeader,ttl,pastLeaders,timestamp,0,false);
      } @ standardOutput<-println(token) : delay(new Integer(100));
    }
    
    return id;
  }

}